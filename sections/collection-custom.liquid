{% comment %}
  Custom Collection Page Section
  Fully dynamic and customizable
{% endcomment %}

<section class="collection-page">
  <div class="container">

    <!-- Heading -->
    {% if section.settings.heading != blank %}
      <h2 class="collection-heading">{{ section.settings.heading }}</h2>
    {% endif %}

    {% if section.settings.subheading != blank %}
      <p class="collection-subheading">{{ section.settings.subheading }}</p>
    {% endif %}

    <!-- Filters Bar -->
    <div class="collection-filters">
      {% if section.settings.show_filters %}
        <div class="filters-wrap">
          <label>Availability</label>
          <select id="availability-filter">
            <option value="">All</option>
            <option value="in-stock">In Stock</option>
            <option value="out-of-stock">Out of Stock</option>
          </select>

          <label>Price</label>
          <select id="price-filter">
            <option value="">All</option>
            <option value="low-high">Low to High</option>
            <option value="high-low">High to Low</option>
          </select>

          <label>Sort By</label>
          <select id="sort-by">
            <option value="best-selling">Best Selling</option>
            <option value="price-ascending">Price: Low to High</option>
            <option value="price-descending">Price: High to Low</option>
            <option value="title-ascending">Alphabetically A-Z</option>
            <option value="title-descending">Alphabetically Z-A</option>
          </select>
        </div>
      {% endif %}

      {% if section.settings.show_count %}
        <div class="product-count">
          {{ collection.products_count }} products
        </div>
      {% endif %}
    </div>

    <!-- Product Grid -->
    <div class="collection-grid grid-cols-{{ section.settings.columns }}">
      {% for product in collection.products %}
        <div class="collection-card">
          <a href="{{ product.url }}">
            {% if product.featured_image %}
              <img src="{{ product.featured_image | img_url: '600x' }}" alt="{{ product.title }}">
            {% endif %}
            <h3>{{ product.title }}</h3>
            <p>{{ product.price | money }}</p>
          </a>
        </div>
      {% else %}
        <p>No products found in this collection.</p>
      {% endfor %}
    </div>
  </div>
</section>

{% schema %}
{
  "name": "Collection Custom",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Our Collection"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Explore our latest products"
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "label": "Show Filter Bar",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_count",
      "label": "Show Product Count",
      "default": true
    },
    {
      "type": "range",
      "id": "columns",
      "label": "Grid Columns",
      "default": 4,
      "min": 2,
      "max": 5,
      "step": 1
    }
  ],
  "presets": [
    {
      "name": "Custom Collection"
    }
  ]
}
{% endschema %}

{% stylesheet %}
.collection-page {
  padding: 60px 0;
}
.collection-grid {
  display: grid;
  gap: 20px;
}
.grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.grid-cols-4 { grid-template-columns: repeat(4, 1fr); }
.grid-cols-5 { grid-template-columns: repeat(5, 1fr); }
.collection-card {
  text-align: center;
  border: 1px solid #eee;
  border-radius: 10px;
  padding: 20px;
  background: #fff;
  transition: 0.3s;
}
.collection-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 5px 10px rgba(0,0,0,0.1);
}
{% endstylesheet %}


<script>
document.addEventListener("DOMContentLoaded", function() {
  const availabilityFilter = document.getElementById("availability-filter");
  const priceFilter = document.getElementById("price-filter");
  const sortBy = document.getElementById("sort-by");
  const productGrid = document.querySelector(".collection-grid");
  const products = Array.from(productGrid.querySelectorAll(".collection-card"));

  function updateProducts() {
    let filtered = [...products];

    // Availability Filter
    const avail = availabilityFilter.value;
    if (avail === "in-stock") {
      filtered = filtered.filter(p => !p.querySelector("p").textContent.includes("Sold out"));
    } else if (avail === "out-of-stock") {
      filtered = filtered.filter(p => p.querySelector("p").textContent.includes("Sold out"));
    }

    // Price Filter
    const priceValue = priceFilter.value;
    filtered.sort((a, b) => {
      const priceA = parseFloat(a.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
      const priceB = parseFloat(b.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;

      if (priceValue === "low-high") return priceA - priceB;
      if (priceValue === "high-low") return priceB - priceA;
      return 0;
    });

    // Sort By
    const sortValue = sortBy.value;
    if (sortValue === "title-ascending") {
      filtered.sort((a, b) => a.querySelector("h3").textContent.localeCompare(b.querySelector("h3").textContent));
    } else if (sortValue === "title-descending") {
      filtered.sort((a, b) => b.querySelector("h3").textContent.localeCompare(a.querySelector("h3").textContent));
    } else if (sortValue === "price-ascending") {
      filtered.sort((a, b) => {
        const pa = parseFloat(a.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        const pb = parseFloat(b.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        return pa - pb;
      });
    } else if (sortValue === "price-descending") {
      filtered.sort((a, b) => {
        const pa = parseFloat(a.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        const pb = parseFloat(b.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        return pb - pa;
      });
    }

    // Render updated products
    productGrid.innerHTML = "";
    filtered.forEach(p => productGrid.appendChild(p));
  }

  [availabilityFilter, priceFilter, sortBy].forEach(select => {
    if (select) select.addEventListener("change", updateProducts);
  });
});
</script>
