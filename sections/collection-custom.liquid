<script>
document.addEventListener("DOMContentLoaded", function() {
  const availabilityFilter = document.getElementById("availability-filter");
  const priceFilter = document.getElementById("price-filter");
  const sortBy = document.getElementById("sort-by");
  const productGrid = document.querySelector(".collection-grid");
  const products = Array.from(productGrid.querySelectorAll(".collection-card"));

  function updateProducts() {
    let filtered = [...products];

    // Availability Filter
    const avail = availabilityFilter.value;
    if (avail === "in-stock") {
      filtered = filtered.filter(p => !p.querySelector("p").textContent.includes("Sold out"));
    } else if (avail === "out-of-stock") {
      filtered = filtered.filter(p => p.querySelector("p").textContent.includes("Sold out"));
    }

    // Price Filter
    const priceValue = priceFilter.value;
    filtered.sort((a, b) => {
      const priceA = parseFloat(a.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
      const priceB = parseFloat(b.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;

      if (priceValue === "low-high") return priceA - priceB;
      if (priceValue === "high-low") return priceB - priceA;
      return 0;
    });

    // Sort By
    const sortValue = sortBy.value;
    if (sortValue === "title-ascending") {
      filtered.sort((a, b) => a.querySelector("h3").textContent.localeCompare(b.querySelector("h3").textContent));
    } else if (sortValue === "title-descending") {
      filtered.sort((a, b) => b.querySelector("h3").textContent.localeCompare(a.querySelector("h3").textContent));
    } else if (sortValue === "price-ascending") {
      filtered.sort((a, b) => {
        const pa = parseFloat(a.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        const pb = parseFloat(b.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        return pa - pb;
      });
    } else if (sortValue === "price-descending") {
      filtered.sort((a, b) => {
        const pa = parseFloat(a.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        const pb = parseFloat(b.querySelector("p").textContent.replace(/[^0-9.]/g, "")) || 0;
        return pb - pa;
      });
    }

    // Render updated products
    productGrid.innerHTML = "";
    filtered.forEach(p => productGrid.appendChild(p));
  }

  [availabilityFilter, priceFilter, sortBy].forEach(select => {
    if (select) select.addEventListener("change", updateProducts);
  });
});
</script>
